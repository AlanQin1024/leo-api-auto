{"version":3,"sources":["webpack:///./src/api/mail.js","webpack:///src/components/project/cronJob/CronJobList.vue","webpack:///./src/api/cronJob.js","webpack:///./src/components/project/cronJob/CronJobList.vue?8222","webpack:///./src/components/project/cronJob/CronJobList.vue"],"names":["__webpack_exports__","project_id","params","request","url","method","headers","data","mail_id","__WEBPACK_IMPORTED_MODULE_0__utils_axios__","__webpack_require__","CronJobList","name","_this","this","filters","testSuites","mailList","TriggerTypes","value","size","skip","sortBy","order","pageNum","totalNum","selects","delLoading","disDel","TestStatus","listLoading","statusChangeLoading","cronJobs","testEnvs","titleMap","add","edit","dialogStatus","formVisible","editLoading","formRules","required","message","trigger","min","max","testSuiteIdList","testEnvId","alarmMailList","triggerType","interval","validator","rule","callback","undefined","Error","$message","warning","center","runDate","description","form","includeForbidden","initForm","testDomain","pickerOptions","disabledDate","time","getTime","Date","now","methods","getTestEnvList","_this2","self","status","projectId","$route","Object","testEnv","then","res","rows","error","catch","checkActiveTestEnv","length","getMailList","trim","mail","checkActiveMail","getTestSuiteList","testSuite","checkActiveTestSuite","queryCronJobs","header","getCronJobs","getCronJobList","handleSizeChange","val","handleCurrentChange","handleDel","index","row","_this3","$confirm","type","cron_job_id","deleteCronJob","_id","success","selectsChange","update","stringToDate","dateStr","separator","dateArr","toString","split","year","parseInt","month","indexOf","substring","day","handleEdit","constructor","String","assign_default","handleAdd","submit","_this4","$refs","validate","valid","Content-Type","createUser","$store","getters","email","Number","addCronJob","resetFields","_params","lastUpdateUser","updateCronJob","sortChange","column","prop","handleChangeStatus","updateUser","console","log","pauseCronJob","resumeCronJob","triggerTypeChange","selVal","reportRowStyle","_ref","rowIndex","ReportTableRow","_ref2","created","cronJob_CronJobList","render","_vm","_h","$createElement","_c","_self","staticStyle","margin","staticClass","_v","_s","meta","title","padding-bottom","attrs","span","inline","model","nativeOn","$event","preventDefault","text-decoration","color","to","on","click","$router","back","margin-right","margin-left","float","placeholder","keyup","_k","keyCode","key","$$v","$set","expression","directives","rawName","width","row-style","row-class-name","highlight-current-row","sort-change","selection-change","min-width","label","sortable","show-overflow-tooltip","scopedSlots","_u","fn","scope","src","$index","loading","left","visible","close-on-click-modal","update:visible","ref","rules","label-width","auto-complete","clearable","multiple","visible-change","_l","item","change","picker-options","_e","slot","page-sizes","page-size","layout","total","size-change","current-change","staticRenderFns","Component","normalizeComponent","ssrContext"],"mappings":"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","file":"static/js/7.4b53ffd922a2b9146822.js","sourcesContent":["import request from '../utils/axios'\n\nexport function getMails(project_id, params) {\n  return request({\n    url: `/api/project/${project_id}/mailList`,\n    params: params,\n    method: 'GET'\n  })\n}\n\nexport function addMail(project_id, params, headers) {\n  return request({\n    url: `/api/project/${project_id}/addMail`,\n    method: 'POST',\n    headers: headers,\n    data: params\n  })\n}\n\nexport function updateMail(project_id, mail_id, params, headers) {\n  return request({\n    url: `/api/project/${project_id}/updateMail/${mail_id}`,\n    method: 'POST',\n    headers: headers,\n    data: params\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/mail.js","<template>\n  <section style=\"margin:10px 35px\">\n    <!--页面title-->\n    <strong class=\"title\">{{$route.meta.title}}</strong>\n\n    <!--工具条-->\n    <el-col :span=\"24\" class=\"toolbar\" style=\"padding-bottom: 0px;\">\n      <el-form :inline=\"true\" :model=\"filters\" @submit.native.prevent>\n        <router-link to=\"\" style=\"text-decoration: none;color: aliceblue;\">\n          <el-button class=\"return-list\" @click=\"$router.back(-1)\">\n            <i class=\"el-icon-d-arrow-left\" style=\"margin-right: 5px\"></i>返回\n          </el-button>\n        </router-link>\n        <el-form-item style=\"margin-left: 35px\">\n          <el-button class=\"el-icon-plus\" type=\"primary\" @click=\"handleAdd\"> 新增定时任务</el-button>\n        </el-form-item>\n        <div style=\"float: right; margin-right: 100px\">\n          <el-form-item>\n            <el-input v-model.trim=\"filters.name\" placeholder=\"名称\" @keyup.enter.native=\"getCronJobList\"></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" class=\"el-icon-search\" @click=\"getCronJobList\"> 查询</el-button>\n          </el-form-item>\n        </div>\n      </el-form>\n    </el-col>\n\n    <!--定时任务列表-->\n    <el-table @sort-change='sortChange' :row-style=\"reportRowStyle\" :row-class-name=\"ReportTableRow\" :data=\"cronJobs\"\n              highlight-current-row v-loading=\"listLoading\" @selection-change=\"selectsChange\" style=\"width: 100%;\">\n      <el-table-column type=\"selection\" min-width=\"5%\">\n      </el-table-column>\n      <el-table-column prop=\"_id\" label=\"任务ID\" min-width=\"20%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"name\" label=\"任务名称\" min-width=\"30%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"description\" label=\"描述\" min-width=\"20%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"createAt\" label=\"创建时间\" min-width=\"25%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column sortable='custom' prop=\"createUser\" label=\"创建者\" min-width=\"15%\" show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"lastUpdateTime\" label=\"更新时间\" min-width=\"25%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"lastUpdateUser\" label=\"更新者\" min-width=\"15%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"next_run_time\" label=\"next执行时间\" min-width=\"25%\" sortable='custom' show-overflow-tooltip>\n      </el-table-column>\n      <el-table-column prop=\"status\" label=\"状态\" min-width=\"10%\">\n        <template slot-scope=\"scope\">\n          <img v-show=\"scope.row.status!=='PAUSED'\" src=\"../../../assets/imgs/icon-yes.svg\"/>\n          <img v-show=\"scope.row.status==='PAUSED'\" src=\"../../../assets/imgs/icon-no.svg\"/>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" min-width=\"50%\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"primary\" size=\"small\" @click=\"handleEdit(scope.$index, scope.row)\">编辑</el-button>\n          <el-button type=\"danger\" size=\"small\" @click=\"handleDel(scope.$index, scope.row)\">删除</el-button>\n          <el-button\n            type=\"info\"\n            size=\"small\"\n            :loading=\"statusChangeLoading\"\n            @click=\"handleChangeStatus(scope.$index, scope.row)\">\n            {{scope.row.status==='PAUSED'?'启动':'停用'}}\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!--编辑-->\n    <el-dialog :title=\"titleMap[dialogStatus]\" :visible.sync=\"formVisible\" width=\"70%\" :close-on-click-modal=\"false\"\n               style=\"width: 65%; left: 17.5%\">\n      <el-form :model=\"form\" :rules=\"formRules\" ref=\"form\" label-width=\"80px\">\n        <el-form-item label=\"任务名称\" prop=\"name\">\n          <el-input v-model=\"form.name\" auto-complete=\"off\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"用例组\" prop=\"testSuiteIdList\">\n          <el-select style=\"width: 60%;\" v-model=\"form.testSuiteIdList\" @visible-change=\"checkActiveTestSuite\"\n                     clearable multiple auto-complete=\"off\">\n            <el-option v-for=\"(item,index) in testSuites\" :key=\"index+''\" :label=\"item.name\"\n                       :value=\"item._id\"></el-option>\n          </el-select>\n          <el-checkbox style=\"margin-left: 50px\" label='是否执行禁用的用例(组)' v-model=\"form.includeForbidden\">\n          </el-checkbox>\n        </el-form-item>\n        <el-form-item label=\"测试环境\" prop=\"testEnvId\">\n          <el-select\n            v-model=\"form.testEnvId\"\n            @visible-change=\"checkActiveTestEnv\"\n            clearable\n            auto-complete=\"off\">\n            <el-option v-for=\"(item,index) in testEnvs\" :key=\"index\" :label=\"item.name\" :value=\"item._id\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"触发类型\" prop=\"triggerType\">\n          <el-select clearable v-model.trim=\"form.triggerType\" @change=\"triggerTypeChange\" auto-complete=\"off\">\n            <el-option v-for=\"(item,index) in TriggerTypes\" :key=\"index+''\" :label=\"item.name\"\n                       :value=\"item.value\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <transition name=\"el-zoom-in-top\">\n          <div class=\"form-item-sub form-item-short\"\n               v-if=\"form.triggerType.toString()==='interval' || form.triggerType.toString()==='date'\">\n            <el-form-item v-show=\"form.triggerType.toString()==='interval'\" label=\"间隔/秒\" prop=\"interval\">\n              <el-input style=\"width:50%\" v-model.trim=\"form.interval\" type=\"number\" auto-complete=\"off\"></el-input>\n            </el-form-item>\n\n            <el-form-item v-show=\"form.triggerType.toString()==='date'\" label=\"具体日期\" prop=\"runDate\">\n              <el-date-picker\n                :picker-options=\"pickerOptions\"\n                v-model.trim=\"form.runDate\"\n                type=\"datetime\"\n                placeholder=\"请选择触发日期\">\n              </el-date-picker>\n            </el-form-item>\n          </div>\n        </transition>\n\n        <el-form-item label=\"告警邮箱\" prop=\"alarmMailList\">\n          <el-select style=\"width: 60%;\" v-model=\"form['alarmMailList']\" @visible-change=\"checkActiveMail\"\n                     clearable multiple placeholder=\"请选择告警报告接受者(可多选)\">\n            <el-option v-for=\"(item,index) in mailList\" :key=\"index\" :label=\"item.name\"\n                       :value=\"item.email\"></el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"任务描述\" prop='description'>\n          <el-input type=\"textarea\" :rows=\"4\" v-model=\"form.description\"></el-input>\n        </el-form-item>\n\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click.native=\"formVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click.native=\"submit\" :loading=\"editLoading\">提交</el-button>\n      </div>\n    </el-dialog>\n\n    <!--工具条-->\n    <el-col :span=\"24\" class=\"toolbar\">\n      <el-pagination\n        style=\"float: right\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :page-sizes=\"[10, 20, 40]\"\n        :page-size=\"size\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"totalNum\">\n      </el-pagination>\n    </el-col>\n  </section>\n</template>\n\n<script>\n    import {\n        getCronJobs, addCronJob, updateCronJob, deleteCronJob, pauseCronJob, resumeCronJob\n    } from \"../../../api/cronJob\";\n    import {getTestEnvs} from \"../../../api/testEnv\";\n    import {getTestSuites} from \"../../../api/testSuite\";\n    import {getMails} from \"../../../api/mail\";\n\n    export default {\n        name: \"CronJobList\",\n        data() {\n            let checkTriggerInterval = (rule, value, callback) => {\n                if (value !== \"\" && value !== null && value !== undefined) {\n                    if (value >= 60) {\n                        callback()\n                    } else {\n                        callback(new Error('请输入大于或等于一分钟的触发间隔！'))\n                        this.$message.warning({\n                            message: '请输入大于或等于一分钟的触发间隔！',\n                            center: true,\n                        });\n                    }\n                } else {\n                    callback()\n                }\n            };\n            return {\n                filters: {\n                    name: ''\n                },\n                testSuites: [],\n                mailList: [],\n                TriggerTypes: [{name: '触发间隔', value: 'interval'},\n                    {name: '具体日期', value: 'date'}],\n                size: 10,\n                skip: 0,\n                sortBy: 'createAt',\n                order: 'descending',\n                pageNum: 1,\n                totalNum: 0,\n                selects: [],//列表选中列\n                delLoading: false,\n                disDel: true,\n                TestStatus: false,\n                listLoading: false,\n                statusChangeLoading: false,\n                cronJobs: [],\n                testEnvs: [],\n\n                titleMap: {\n                    add: '新增定时任务',\n                    edit: '编辑定时任务'\n                },\n                dialogStatus: '',\n                formVisible: false,//编辑界面是否显示\n                editLoading: false,\n                formRules: {\n                    name: [\n                        {required: true, message: '请输入名称', trigger: 'blur'},\n                        {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}\n                    ],\n                    testSuiteIdList: [\n                        {required: true, message: '请选择测试用例组', trigger: 'blur'}\n                    ],\n                    testEnvId: [\n                        {required: true, message: '请选择测试环境', trigger: 'blur'}\n                    ],\n                    alarmMailList: [\n                        {required: false, message: '请选择告警邮箱', trigger: 'blur'}\n                    ],\n                    triggerType: [\n                        {required: true, message: '请选择触发类型', trigger: 'blur'}\n                    ],\n                    interval: [\n                        {required: false, message: '请输入触发间隔', trigger: 'blur'},\n                        {validator: checkTriggerInterval, trigger: 'blur'}\n                    ],\n                    runDate: [\n                        {required: false, message: '请输入触发时间', trigger: 'blur'}\n                    ],\n                    description: [\n                        {required: false, message: '请输入版本号', trigger: 'blur'},\n                        {max: 1024, message: '不能超过1024个字符', trigger: 'blur'}\n                    ]\n                },\n                //编辑界面数据\n                form: {\n                    name: '',\n                    testSuiteIdList: [],\n                    includeForbidden: false,\n                    testEnvId: '',\n                    alarmMailList: [],\n                    triggerType: '',\n                    interval: 0,\n                    runDate: '',\n                    description: ''\n                },\n                initForm: {\n                    name: '',\n                    testSuiteIdList: [],\n                    includeForbidden: false,\n                    testDomain: '',\n                    alarmMailList: [],\n                    triggerType: '',\n                    interval: 0,\n                    runDate: '',\n                    description: ''\n                },\n                pickerOptions: {\n                    disabledDate: (time) => {\n                        return time.getTime() < (Date.now() - 8.64e7)\n                    }\n                }\n            }\n        },\n        methods: {\n            getTestEnvList() {\n                let self = this;\n                let header = {};\n                let params = {status: true, projectId: self.$route.params.project_id};\n                getTestEnvs(self.$route.params.project_id, params, header).then((res) => {\n                    let {status, data} = res\n                    if (status === 'ok') {\n                        this.testEnvs = data.rows\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '暂时无法获取环境列表，请稍后刷新重试~',\n                        center: true,\n                    });\n                })\n            },\n            checkActiveTestEnv: function () {\n                let self = this;\n                if (self.testEnvs.length < 1) {\n                    self.$message.warning({\n                        message: '未找到「启用的测试环境」哦, 请前往「环境配置」进行设置',\n                        center: true,\n                    })\n                }\n            },\n            getMailList() {\n                this.listLoading = true;\n                let self = this;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                if (self.filters.name.trim() !== '') {\n                    params['name'] = self.filters.name.trim()\n                }\n                getMails(this.$route.params.project_id, params).then((res) => {\n                    let {status, data} = res;\n                    self.listLoading = false;\n                    if (status === 'ok') {\n                        self.totalNum = data.totalNum;\n                        self.mailList = data.rows\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '邮箱列表获取失败，请稍后刷新重试哦~',\n                        center: true,\n                    });\n                    self.listLoading = false;\n                });\n            },\n            checkActiveMail: function () {\n                let self = this;\n                if (self.mailList.length < 1) {\n                    self.$message.warning({\n                        message: '未找到「启用的邮箱」哦, 请前往「邮箱配置」进行设置',\n                        center: true,\n                    })\n                }\n            },\n            // 获取用例组列表\n            getTestSuiteList() {\n                let self = this;\n                let params = {\n                    skip: self.skip, size: self.size, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                }\n                this.listLoading = true;\n                if (self.filters.name.trim() !== '') {\n                    params['name'] = self.filters.name.trim()\n                }\n                ;\n                let header = {};\n                getTestSuites(self.$route.params.project_id, params, header).then((res) => {\n                    self.listLoading = false;\n                    let {status, data} = res;\n                    if (status === 'ok') {\n                        self.testSuites = data.rows;\n                        self.totalNum = data.totalNum;\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '用例列表获取失败，请稍后刷新重试哦~',\n                        center: true,\n                    });\n                    self.listLoading = false;\n                })\n            },\n            checkActiveTestSuite: function () {\n                let self = this;\n                if (self.testSuites.length < 1) {\n                    self.$message.warning({\n                        message: '未找到「启用的测试用例组」哦, 请前往「自动化测试」进行设置',\n                        center: true,\n                    })\n                }\n            },\n            queryCronJobs(params) {\n                let self = this;\n                if (self.filters.name.trim() !== '') {\n                    params['name'] = self.filters.name.trim()\n                }\n                let header = {};\n                getCronJobs(self.$route.params.project_id, params, header).then((res) => {\n                    self.listLoading = false;\n                    let {status, data} = res;\n                    if (status === 'ok') {\n                        self.totalNum = data.totalNum;\n                        self.cronJobs = data.rows;\n                    } else {\n                        self.$message.error({\n                            message: data,\n                            center: true,\n                        })\n                    }\n                }).catch((error) => {\n                    self.$message.error({\n                        message: '定时任务列表获取失败，请稍后刷新重试哦~',\n                        center: true,\n                    });\n                    self.listLoading = false;\n                })\n            },\n            getCronJobList() {\n                this.listLoading = true;\n                let self = this\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n            handleSizeChange(val) {\n                let self = this;\n                self.size = val;\n                self.listLoading = true;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n            handleCurrentChange(val) {\n                let self = this;\n                self.skip = (val - 1) * self.size;\n                self.listLoading = true;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n\n            //删除\n            handleDel: function (index, row) {\n                this.$confirm('确认删除该记录吗?', '提示', {\n                    type: 'warning'\n                }).then(() => {\n                    this.listLoading = true;\n                    let self = this;\n                    let header = {};\n                    let params = {}\n                    deleteCronJob(this.$route.params.project_id, row._id, params, header).then((res) => {\n                        let {status, data} = res;\n                        if (status === 'ok') {\n                            self.$message.success({\n                                message: data,\n                                center: true,\n                            });\n                        } else {\n                            self.$message.error({\n                                message: data,\n                                center: true,\n                            });\n                        }\n                        self.getCronJobList();\n                    });\n                })\n            },\n            selectsChange: function (selects) {\n                if (selects.length > 0) {\n                    this.selects = selects;\n                    this.update = false\n                } else {\n                    this.update = true\n                }\n            },\n            // TODO 抽出成通用方法\n            stringToDate: function (dateStr, separator) {\n                if (!separator) {\n                    separator = \"-\";\n                }\n                let dateArr = dateStr.toString().split(separator);\n                let year = parseInt(dateArr[0]);\n                let month;\n                //处理月份为04这样的情况\n                if (dateArr[1].indexOf(\"0\") == 0) {\n                    month = parseInt(dateArr[1].substring(1));\n                } else {\n                    month = parseInt(dateArr[1]);\n                }\n                let day = parseInt(dateArr[2]);\n                let date = new Date(year, month - 1, day);\n                return date;\n            },\n            //显示编辑界面\n            handleEdit: function (index, row) {\n                this.formVisible = true;\n                if (row['runDate'] && row['runDate'].constructor === String) {\n                    row['runDate'] = this.stringToDate(row['runDate'])\n                }\n                this.form = Object.assign({}, this.form, row); // 新字段上线，需要使用this.editForm添加\n                this.dialogStatus = 'edit'\n            },\n            //显示新增界面\n            handleAdd: function () {\n                this.formVisible = true;\n                this.form = Object.assign({}, this.form, this.initForm);\n                this.dialogStatus = 'add';\n            },\n\n            submit() {\n                this.$refs.form.validate((valid) => {\n                    let self = this;\n                    if (valid) {\n                        if (!(self.form.runDate && self.form.runDate.toString().trim() !== '') &&\n                            !(self.form.interval && self.form.interval.toString().trim() !== '')) {\n                            if (self.form.triggerType === 'interval')\n                                self.$message.warning({\n                                    message: '请输入触发间隔',\n                                    center: true,\n                                })\n                            else if (self.form.triggerType === 'date') {\n                                self.$message.warning({\n                                    message: '请输入具体日期',\n                                    center: true,\n                                })\n                            }\n                        } else if (self.form.triggerType === 'date' && self.form.runDate < Date.now()) {\n                            self.$message.warning({\n                                message: '人生不能重来哦 ~ 请输入「此刻」以后的日期',\n                                center: true,\n                            })\n                        } else {\n                            this.$confirm('确认提交吗？', '提示', {}).then(() => {\n                                self.editLoading = true;\n                                let headers = {\n                                    \"Content-Type\": \"application/json\",\n                                };\n                                if (this.dialogStatus == 'add') {\n                                    let params = {\n                                        name: self.form.name.trim(),\n                                        testSuiteIdList: self.form.testSuiteIdList,\n                                        testEnvId: self.form.testEnvId,\n                                        includeForbidden: self.form.includeForbidden,\n                                        triggerType: self.form.triggerType,\n                                        description: self.form.description.trim(),\n                                        alarmMailList: self.form.alarmMailList,\n                                        createUser: self.$store.getters.email || 'anonymous',\n                                    };\n                                    if (self.form.runDate && self.form.runDate.toString().trim() !== '') {\n                                        params['runDate'] = self.form.runDate\n                                    }\n                                    if (self.form.interval && self.form.interval.toString().trim() !== '') {\n                                        params['interval'] = Number(self.form.interval)\n                                    }\n                                    addCronJob(self.$route.params.project_id, params, headers).then((res) => {\n                                        self.editLoading = false;\n                                        let {status, data} = res;\n                                        if (status === 'ok') {\n                                            self.formVisible = false\n                                            self.$message.success({\n                                                message: '添加成功',\n                                                center: true,\n                                            });\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList();\n                                        } else {\n                                            self.formVisible = false\n                                            self.$message.error({\n                                                message: data,\n                                                center: true,\n                                            })\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList()\n                                        }\n                                    });\n                                } else if (this.dialogStatus == 'edit') {\n                                    let params = {\n                                        name: self.form.name.trim(),\n                                        testSuiteIdList: self.form.testSuiteIdList,\n                                        testEnvId: self.form.testEnvId,\n                                        includeForbidden: self.form.includeForbidden,\n                                        triggerType: self.form.triggerType,\n                                        description: self.form.description.trim(),\n                                        alarmMailList: self.form.alarmMailList,\n                                        lastUpdateUser: self.$store.getters.email || 'anonymous',\n                                    };\n                                    if (self.form.runDate && self.form.runDate.toString().trim() !== '') {\n                                        params['runDate'] = self.form.runDate\n                                    }\n                                    if (self.form.interval && self.form.interval.toString().trim() !== '') {\n                                        params['interval'] = Number(self.form.interval)\n                                    }\n                                    updateCronJob(self.$route.params.project_id, self.form._id, params, headers).then((res) => {\n                                        self.editLoading = false;\n                                        let {status, data} = res;\n                                        if (status === 'ok') {\n                                            self.formVisible = false\n                                            self.$message.success({\n                                                message: '更新成功',\n                                                center: true,\n                                            });\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList();\n                                        } else {\n                                            self.formVisible = false\n                                            self.$message.error({\n                                                message: data,\n                                                center: true,\n                                            })\n                                            self.$refs['form'].resetFields();\n                                            self.formVisible = false;\n                                            self.getCronJobList()\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    }\n                });\n            },\n            //排序\n            sortChange(column) {\n                let self = this;\n                self.listLoading = true;\n                self.sortBy = column.prop;\n                self.order = column.order;\n                let params = {\n                    size: self.size, skip: self.skip, sortBy: self.sortBy, order: self.order,\n                    projectId: self.$route.params.project_id\n                };\n                this.queryCronJobs(params);\n            },\n            handleChangeStatus(index, row) {\n                let self = this;\n                self.statusChangeLoading = true;\n                let header = {};\n                let params = {\n                    updateUser: self.$store.getters.email\n                };\n                console.log(row.status)\n                if (row.status !== 'PAUSED') {\n                    pauseCronJob(self.$route.params.project_id, row._id, params, header).then((res) => {\n                        self.statusChangeLoading = false;\n                        let {status, data} = res;\n                        if (status === 'ok') {\n                            self.$message.success({\n                                message: data,\n                                center: true,\n                            });\n                        } else {\n                            self.$message.error({\n                                message: data,\n                                center: true,\n                            });\n                        }\n                        self.getCronJobList();\n                    }).catch((error) => {\n                        self.$message.error({\n                            message: '定时任务状态变更失败，请稍后刷新重试哦~',\n                            center: true,\n                        });\n                        self.statusChangeLoading = false;\n                    })\n                } else {\n                    resumeCronJob(self.$route.params.project_id, row._id, params, header).then((res) => {\n                        self.statusChangeLoading = false;\n                        let {status, data} = res;\n                        if (status === 'ok') {\n                            self.$message.success({\n                                message: data,\n                                center: true,\n                            });\n                        } else {\n                            self.$message.error({\n                                message: data,\n                                center: true,\n                            });\n                        }\n                        self.getCronJobList();\n                    }).catch((error) => {\n                        self.$message.error({\n                            message: '定时任务状态变更失败，请稍后刷新重试哦~',\n                            center: true,\n                        });\n                        self.statusChangeLoading = false;\n                        self.getCronJobList();\n                    })\n                }\n            },\n\n            triggerTypeChange(selVal) {\n                if (selVal === 'interval') {\n                    this.form.runDate = ''\n                } else if (selVal === 'date') {\n                    this.form.interval = ''\n                }\n            },\n            // 修改table tr行的背景色\n            reportRowStyle({row, rowIndex}) {\n                if (row.status === 'PAUSED')\n                    return 'background-color: #DDDDDD'\n                else {\n                    return ''\n                }\n            },\n            ReportTableRow({row, rowIndex}) {\n                return 'reportTableRow';\n            },\n        },\n        created() {\n            this.getTestEnvList();\n            this.getCronJobList();\n            this.getMailList();\n            this.getTestSuiteList();\n        }\n    }\n</script>\n\n\n<style lang=\"scss\" scoped>\n  .title {\n    width: 200px;\n    float: left;\n    color: #475669;\n    font-size: 25px;\n    margin: 10px 5px;\n    font-family: Arial;\n  }\n\n  .return-list {\n    margin-top: 0px;\n    margin-bottom: 10px;\n    margin-left: 20px;\n    border-radius: 25px;\n  }\n\n  .sub-form-item {\n    padding-left: 40px;\n  }\n\n  .form-item-sub {\n    position: relative;\n    background-color: #f5f7fa;\n    padding: 10px 0;\n    margin-bottom: 10px;\n    border-radius: 4px;\n    box-shadow: inset 0 0 3px 0px #7c7c7c61;\n  }\n\n  .form-item-sub::before {\n    position: absolute;\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    top: -8px;\n    left: 220px;\n    border-bottom: 8px solid #ecedef;\n    border-left: 8px solid transparent;\n    border-right: 8px solid transparent;\n    border-top: 0px solid transparent;\n  }\n\n  .form-item-short > > > .el-form-item__content {\n    margin-left: 100px !important;\n  }\n\n  .form-item-short > > > .el-input {\n    margin: 0 10px;\n  }\n\n  .el-form-item:last-child {\n    margin-bottom: 0;\n  }\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/project/cronJob/CronJobList.vue","import request from '../utils/axios'\n\nexport function getCronJobs(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/cronJobList`,\n    method: 'GET',\n    headers: header,\n    params: params\n  })\n}\n\nexport function addCronJob(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/addCronJob`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function updateCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/updateCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function pauseCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/pauseCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function deleteCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/deleteCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function resumeCronJob(project_id, cron_job_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/resumeCronJob/${cron_job_id}`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function startScheduler(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/cronJob/start`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\nexport function shutdownScheduler(project_id, params, header) {\n  return request({\n    url: `/api/project/${project_id}/cronJob/shutdown`,\n    method: 'POST',\n    headers: header,\n    data: params\n  })\n}\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/cronJob.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('section',{staticStyle:{\"margin\":\"10px 35px\"}},[_c('strong',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.$route.meta.title))]),_vm._v(\" \"),_c('el-col',{staticClass:\"toolbar\",staticStyle:{\"padding-bottom\":\"0px\"},attrs:{\"span\":24}},[_c('el-form',{attrs:{\"inline\":true,\"model\":_vm.filters},nativeOn:{\"submit\":function($event){$event.preventDefault();}}},[_c('router-link',{staticStyle:{\"text-decoration\":\"none\",\"color\":\"aliceblue\"},attrs:{\"to\":\"\"}},[_c('el-button',{staticClass:\"return-list\",on:{\"click\":function($event){return _vm.$router.back(-1)}}},[_c('i',{staticClass:\"el-icon-d-arrow-left\",staticStyle:{\"margin-right\":\"5px\"}}),_vm._v(\"返回\\n        \")])],1),_vm._v(\" \"),_c('el-form-item',{staticStyle:{\"margin-left\":\"35px\"}},[_c('el-button',{staticClass:\"el-icon-plus\",attrs:{\"type\":\"primary\"},on:{\"click\":_vm.handleAdd}},[_vm._v(\" 新增定时任务\")])],1),_vm._v(\" \"),_c('div',{staticStyle:{\"float\":\"right\",\"margin-right\":\"100px\"}},[_c('el-form-item',[_c('el-input',{attrs:{\"placeholder\":\"名称\"},nativeOn:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.getCronJobList($event)}},model:{value:(_vm.filters.name),callback:function ($$v) {_vm.$set(_vm.filters, \"name\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"filters.name\"}})],1),_vm._v(\" \"),_c('el-form-item',[_c('el-button',{staticClass:\"el-icon-search\",attrs:{\"type\":\"primary\"},on:{\"click\":_vm.getCronJobList}},[_vm._v(\" 查询\")])],1)],1)],1)],1),_vm._v(\" \"),_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.listLoading),expression:\"listLoading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"row-style\":_vm.reportRowStyle,\"row-class-name\":_vm.ReportTableRow,\"data\":_vm.cronJobs,\"highlight-current-row\":\"\"},on:{\"sort-change\":_vm.sortChange,\"selection-change\":_vm.selectsChange}},[_c('el-table-column',{attrs:{\"type\":\"selection\",\"min-width\":\"5%\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"_id\",\"label\":\"任务ID\",\"min-width\":\"20%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"name\",\"label\":\"任务名称\",\"min-width\":\"30%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"description\",\"label\":\"描述\",\"min-width\":\"20%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"createAt\",\"label\":\"创建时间\",\"min-width\":\"25%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"sortable\":\"custom\",\"prop\":\"createUser\",\"label\":\"创建者\",\"min-width\":\"15%\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"lastUpdateTime\",\"label\":\"更新时间\",\"min-width\":\"25%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"lastUpdateUser\",\"label\":\"更新者\",\"min-width\":\"15%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"next_run_time\",\"label\":\"next执行时间\",\"min-width\":\"25%\",\"sortable\":\"custom\",\"show-overflow-tooltip\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"status\",\"label\":\"状态\",\"min-width\":\"10%\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('img',{directives:[{name:\"show\",rawName:\"v-show\",value:(scope.row.status!=='PAUSED'),expression:\"scope.row.status!=='PAUSED'\"}],attrs:{\"src\":require(\"../../../assets/imgs/icon-yes.svg\")}}),_vm._v(\" \"),_c('img',{directives:[{name:\"show\",rawName:\"v-show\",value:(scope.row.status==='PAUSED'),expression:\"scope.row.status==='PAUSED'\"}],attrs:{\"src\":require(\"../../../assets/imgs/icon-no.svg\")}})]}}])}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"label\":\"操作\",\"min-width\":\"50%\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('el-button',{attrs:{\"type\":\"primary\",\"size\":\"small\"},on:{\"click\":function($event){return _vm.handleEdit(scope.$index, scope.row)}}},[_vm._v(\"编辑\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"danger\",\"size\":\"small\"},on:{\"click\":function($event){return _vm.handleDel(scope.$index, scope.row)}}},[_vm._v(\"删除\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"info\",\"size\":\"small\",\"loading\":_vm.statusChangeLoading},on:{\"click\":function($event){return _vm.handleChangeStatus(scope.$index, scope.row)}}},[_vm._v(\"\\n          \"+_vm._s(scope.row.status==='PAUSED'?'启动':'停用')+\"\\n        \")])]}}])})],1),_vm._v(\" \"),_c('el-dialog',{staticStyle:{\"width\":\"65%\",\"left\":\"17.5%\"},attrs:{\"title\":_vm.titleMap[_vm.dialogStatus],\"visible\":_vm.formVisible,\"width\":\"70%\",\"close-on-click-modal\":false},on:{\"update:visible\":function($event){_vm.formVisible=$event}}},[_c('el-form',{ref:\"form\",attrs:{\"model\":_vm.form,\"rules\":_vm.formRules,\"label-width\":\"80px\"}},[_c('el-form-item',{attrs:{\"label\":\"任务名称\",\"prop\":\"name\"}},[_c('el-input',{attrs:{\"auto-complete\":\"off\"},model:{value:(_vm.form.name),callback:function ($$v) {_vm.$set(_vm.form, \"name\", $$v)},expression:\"form.name\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"用例组\",\"prop\":\"testSuiteIdList\"}},[_c('el-select',{staticStyle:{\"width\":\"60%\"},attrs:{\"clearable\":\"\",\"multiple\":\"\",\"auto-complete\":\"off\"},on:{\"visible-change\":_vm.checkActiveTestSuite},model:{value:(_vm.form.testSuiteIdList),callback:function ($$v) {_vm.$set(_vm.form, \"testSuiteIdList\", $$v)},expression:\"form.testSuiteIdList\"}},_vm._l((_vm.testSuites),function(item,index){return _c('el-option',{key:index+'',attrs:{\"label\":item.name,\"value\":item._id}})}),1),_vm._v(\" \"),_c('el-checkbox',{staticStyle:{\"margin-left\":\"50px\"},attrs:{\"label\":\"是否执行禁用的用例(组)\"},model:{value:(_vm.form.includeForbidden),callback:function ($$v) {_vm.$set(_vm.form, \"includeForbidden\", $$v)},expression:\"form.includeForbidden\"}})],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"测试环境\",\"prop\":\"testEnvId\"}},[_c('el-select',{attrs:{\"clearable\":\"\",\"auto-complete\":\"off\"},on:{\"visible-change\":_vm.checkActiveTestEnv},model:{value:(_vm.form.testEnvId),callback:function ($$v) {_vm.$set(_vm.form, \"testEnvId\", $$v)},expression:\"form.testEnvId\"}},_vm._l((_vm.testEnvs),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.name,\"value\":item._id}})}),1)],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"触发类型\",\"prop\":\"triggerType\"}},[_c('el-select',{attrs:{\"clearable\":\"\",\"auto-complete\":\"off\"},on:{\"change\":_vm.triggerTypeChange},model:{value:(_vm.form.triggerType),callback:function ($$v) {_vm.$set(_vm.form, \"triggerType\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"form.triggerType\"}},_vm._l((_vm.TriggerTypes),function(item,index){return _c('el-option',{key:index+'',attrs:{\"label\":item.name,\"value\":item.value}})}),1)],1),_vm._v(\" \"),_c('transition',{attrs:{\"name\":\"el-zoom-in-top\"}},[(_vm.form.triggerType.toString()==='interval' || _vm.form.triggerType.toString()==='date')?_c('div',{staticClass:\"form-item-sub form-item-short\"},[_c('el-form-item',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.form.triggerType.toString()==='interval'),expression:\"form.triggerType.toString()==='interval'\"}],attrs:{\"label\":\"间隔/秒\",\"prop\":\"interval\"}},[_c('el-input',{staticStyle:{\"width\":\"50%\"},attrs:{\"type\":\"number\",\"auto-complete\":\"off\"},model:{value:(_vm.form.interval),callback:function ($$v) {_vm.$set(_vm.form, \"interval\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"form.interval\"}})],1),_vm._v(\" \"),_c('el-form-item',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.form.triggerType.toString()==='date'),expression:\"form.triggerType.toString()==='date'\"}],attrs:{\"label\":\"具体日期\",\"prop\":\"runDate\"}},[_c('el-date-picker',{attrs:{\"picker-options\":_vm.pickerOptions,\"type\":\"datetime\",\"placeholder\":\"请选择触发日期\"},model:{value:(_vm.form.runDate),callback:function ($$v) {_vm.$set(_vm.form, \"runDate\", (typeof $$v === 'string'? $$v.trim(): $$v))},expression:\"form.runDate\"}})],1)],1):_vm._e()]),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"告警邮箱\",\"prop\":\"alarmMailList\"}},[_c('el-select',{staticStyle:{\"width\":\"60%\"},attrs:{\"clearable\":\"\",\"multiple\":\"\",\"placeholder\":\"请选择告警报告接受者(可多选)\"},on:{\"visible-change\":_vm.checkActiveMail},model:{value:(_vm.form['alarmMailList']),callback:function ($$v) {_vm.$set(_vm.form, 'alarmMailList', $$v)},expression:\"form['alarmMailList']\"}},_vm._l((_vm.mailList),function(item,index){return _c('el-option',{key:index,attrs:{\"label\":item.name,\"value\":item.email}})}),1)],1),_vm._v(\" \"),_c('el-form-item',{attrs:{\"label\":\"任务描述\",\"prop\":\"description\"}},[_c('el-input',{attrs:{\"type\":\"textarea\",\"rows\":4},model:{value:(_vm.form.description),callback:function ($$v) {_vm.$set(_vm.form, \"description\", $$v)},expression:\"form.description\"}})],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{nativeOn:{\"click\":function($event){_vm.formVisible = false}}},[_vm._v(\"取消\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\",\"loading\":_vm.editLoading},nativeOn:{\"click\":function($event){return _vm.submit($event)}}},[_vm._v(\"提交\")])],1)],1),_vm._v(\" \"),_c('el-col',{staticClass:\"toolbar\",attrs:{\"span\":24}},[_c('el-pagination',{staticStyle:{\"float\":\"right\"},attrs:{\"page-sizes\":[10, 20, 40],\"page-size\":_vm.size,\"layout\":\"total, sizes, prev, pager, next, jumper\",\"total\":_vm.totalNum},on:{\"size-change\":_vm.handleSizeChange,\"current-change\":_vm.handleCurrentChange}})],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4569c318\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/project/cronJob/CronJobList.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4569c318\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!sass-resources-loader?{\\\"resources\\\":\\\"D:\\\\\\\\PycharmProjects\\\\\\\\leo-api-auto\\\\\\\\frontend\\\\\\\\element-variables.scss\\\"}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./CronJobList.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CronJobList.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CronJobList.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4569c318\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./CronJobList.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-4569c318\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/project/cronJob/CronJobList.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}